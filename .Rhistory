ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/scatter_plot.png",
plot = scatter_plot,
width = 8,
height = 6,
bg = "white"
)
# Générer le scatter plot avec courbe quadratique et distinction des groupes de revenus
scatter_plot <- ggplot(JTS_SP_IV_GDPpc, aes(x = wdi_gdppc, y = JTS, color = as.factor(income_group_num))) +
geom_point(alpha = 0.6) +  # Points colorés par groupe de revenu
stat_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red") +  # Courbe quadratique globale
labs(
title = "",
x = "PIB par habitant (dollars constants 2015)",
y = "Just Transition Score (JTS)",
color = "Groupe de revenu"
) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
legend.position = "right"
) +
scale_color_manual(
values = c("1" = "red", "2" = "green", "3" = "blue", "4" = "purple"),
labels = c(
"1" = "Revenu élevé",
"2" = "Revenu intermédiaire supérieur",
"3" = "Revenu intermédiaire inférieur",
"4" = "Faible revenu"
)
)
# Afficher le graphique
print(scatter_plot)
# Sauvegarder le graphique avec un fond blanc
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/scatter_plot.png",
plot = scatter_plot,
width = 8,
height = 6,
bg = "white"
)
# Sauvegarder le graphique avec un fond blanc
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/boxplot_with_outliers.png",
plot = boxplot_with_outliers,
width = 8,
height = 6,
bg = "white"
)
# Préparer les données : ajouter des variations annuelles et identifier les inflexions
evolution_data <- selected_outliers %>%
arrange(iso3c, year) %>%
group_by(iso3c) %>%
mutate(
year = as.integer(year),  # Convertir les années en entiers pour supprimer les décimales
annual_change = JTS - lag(JTS),  # Variation annuelle du score
significant_change = ifelse(abs(annual_change) > 5, "Inflexion", "Stable"),  # Seuil de variation significative
income_group_label = case_when(  # Ajouter des labels textuels pour les groupes de revenu
income_group_num == 1 ~ "Revenu élevé",
income_group_num == 2 ~ "Revenu intermédiaire supérieur",
income_group_num == 3 ~ "Revenu intermédiaire inférieur",
income_group_num == 4 ~ "Faible revenu"
),
country_label = paste0(iso3c, " (", income_group_label, ")")  # Ajouter le nom du pays et groupe de revenu
) %>%
filter(!is.na(significant_change))  # Supprimer les NA de "Type de changement"
# Filtrer les données pour les outliers sélectionnés
selected_outliers <- JTS_SP_IV_GDPpc %>%
filter(iso3c %in% c("BHR", "OMN", "MRT", "AFG", "CHN"))
# Graphique d'évolution des scores JTS pour chaque pays
line_plot <- ggplot(selected_outliers, aes(x = year, y = JTS, group = iso3c, color = iso3c)) +
geom_line(size = 1) +  # Tracer les lignes pour chaque pays
geom_point(size = 2) +  # Ajouter les points pour chaque année
labs(
title = "Évolution des scores JTS des pays sélectionnés",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (ISO3)"
) +
theme_minimal() +
theme(
legend.position = "right",
panel.grid = element_line(color = "grey90")
)
# Afficher le graphique
print(line_plot)
# Préparer les données : ajouter des variations annuelles et identifier les inflexions
evolution_data <- selected_outliers %>%
arrange(iso3c, year) %>%
group_by(iso3c) %>%
mutate(
year = as.integer(year),  # Convertir les années en entiers pour supprimer les décimales
annual_change = JTS - lag(JTS),  # Variation annuelle du score
significant_change = ifelse(abs(annual_change) > 5, "Inflexion", "Stable"),  # Seuil de variation significative
income_group_label = case_when(  # Ajouter des labels textuels pour les groupes de revenu
income_group_num == 1 ~ "Revenu élevé",
income_group_num == 2 ~ "Revenu intermédiaire supérieur",
income_group_num == 3 ~ "Revenu intermédiaire inférieur",
income_group_num == 4 ~ "Faible revenu"
),
country_label = paste0(iso3c, " (", income_group_label, ")")  # Ajouter le nom du pays et groupe de revenu
) %>%
filter(!is.na(significant_change))  # Supprimer les NA de "Type de changement"
# Préparer les données : ajouter des variations annuelles et identifier les inflexions
evolution_data <- selected_outliers %>%
arrange(iso3c, year) %>%
group_by(iso3c) %>%
mutate(
year = as.integer(year),  # Convertir les années en entiers pour supprimer les décimales
annual_change = JTS - lag(JTS),  # Variation annuelle du score
significant_change = ifelse(abs(annual_change) > 5, "Inflexion", "Stable"),  # Seuil de variation significative
income_group_label = case_when(  # Ajouter des labels textuels pour les groupes de revenu
income_group_num == 1 ~ "Revenu élevé",
income_group_num == 2 ~ "Revenu intermédiaire supérieur",
income_group_num == 3 ~ "Revenu intermédiaire inférieur",
income_group_num == 4 ~ "Faible revenu"
),
country_label = paste0(iso3c, " (", income_group_label, ")")  # Ajouter le nom du pays et groupe de revenu
) %>%
filter(!is.na(significant_change))  # Supprimer les NA de "Type de changement"
print(evolution_data)
# Préparer les données : ajouter des variations annuelles et identifier les inflexions
evolution_data <- selected_outliers %>%
arrange(iso3c, year) %>%
group_by(iso3c) %>%
mutate(
year = as.integer(year),  # Convertir les années en entiers pour supprimer les décimales
annual_change = JTS - lag(JTS),  # Variation annuelle du score
significant_change = ifelse(abs(annual_change) > 5, "Inflexion", "Stable"),  # Seuil de variation significative
income_group_label = case_when(  # Ajouter des labels textuels pour les groupes de revenu
income_group_num == 1 ~ "Revenu élevé",
income_group_num == 2 ~ "Revenu intermédiaire supérieur",
income_group_num == 3 ~ "Revenu intermédiaire inférieur",
income_group_num == 4 ~ "Faible revenu"
),
country_label = paste0(iso3c, " (", income_group_label, ")")  # Ajouter le nom du pays et groupe de revenu
) %>%
filter(!is.na(significant_change))  # Supprimer les NA de "Type de changement"
# Créer le graphique
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
geom_line(size = 1) +  # Lignes pour chaque pays
geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  # Points pour chaque année
scale_size_continuous(range = c(2, 6)) +  # Échelle de la taille des points
scale_shape_manual(
values = c("Inflexion" = 17, "Stable" = 16),  # Triangle pour inflexion, cercle pour stable
name = "Type de changement"
) +
scale_x_continuous(
breaks = seq(2011, 2022, by = 1),  # Forcer les années entières comme graduations
labels = seq(2011, 2022, by = 1)   # Utiliser des années comme étiquettes
) +
labs(
title = "",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (Groupe de revenu)",
size = "Amplitude du changement",
shape = "Type de changement"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
panel.grid = element_line(color = "grey90"),
plot.title = element_text(size = 14, face = "bold")
)
# Afficher le graphique
print(trend_plot)
# Sauvegarder le graphique
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/trend_plot_with_fixed_years.png",
plot = trend_plot,
width = 12,
height = 8,
bg = "white"
)
library(ggplot2)
library(dplyr)
# Créer un dataframe avec les seuils des outliers corrigés
outlier_thresholds <- data.frame(
income_group_label = c("Low income", "Lower middle income", "Upper middle income", "High income"),
Lower_Bound = c(30.31, 43.88, 49.15, 40.31),  # Seuils inférieurs pour chaque groupe de revenu
color = c("purple", "blue", "green", "red")  # Couleurs associées aux groupes
)
# Générer une couleur unique pour chaque pays
unique_countries <- unique(evolution_data$country_label)
country_colors <- setNames(
grDevices::rainbow(length(unique_countries)),  # Palette de couleurs distinctes
unique_countries
)
# Combiner les couleurs des seuils et des pays
threshold_colors <- setNames(outlier_thresholds$color, outlier_thresholds$income_group_label)
combined_colors <- c(threshold_colors, country_colors)
# Créer le graphique avec les seuils d'outliers et des couleurs uniques
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
geom_line(size = 1) +  # Lignes pour chaque pays
geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  # Points pour chaque année
scale_size_continuous(range = c(2, 6)) +  # Échelle de la taille des points
scale_shape_manual(
values = c("Inflexion" = 17, "Stable" = 16),  # Triangle pour inflexion, cercle pour stable
name = "Type de changement"
) +
geom_hline(
data = outlier_thresholds,
aes(yintercept = Lower_Bound, color = income_group_label),  # Utilise les seuils et leurs couleurs
linetype = "dashed",
size = 0.8,
inherit.aes = FALSE  # Prevent conflicts with main aes mappings
) +
scale_x_continuous(
breaks = seq(2011, 2022, by = 1),  # Forcer les années entières comme graduations
labels = seq(2011, 2022, by = 1)   # Utiliser des années comme étiquettes
) +
scale_color_manual(
values = combined_colors,  # Combinaison des couleurs des seuils et des pays
breaks = c(names(threshold_colors), names(country_colors)),  # Légendes pour seuils et pays
labels = c(names(threshold_colors), names(country_colors))   # Libellés pour seuils et pays
) +
labs(
title = "",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (Groupe de revenu)\nSeuils (couleurs par revenu)",
size = "Amplitude du changement",
shape = "Type de changement"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
panel.grid = element_line(color = "grey90"),
plot.title = element_text(size = 14, face = "bold")
)
# Afficher le graphique
print(trend_plot)
# Sauvegarder le graphique
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/trend_plot_with_unique_country_colors.png",
plot = trend_plot,
width = 12,
height = 8,
bg = "white"
)
library(ggplot2)
library(dplyr)
# Créer un dataframe avec les seuils des outliers corrigés
outlier_thresholds <- data.frame(
income_group_label = c("Revenu élevé", "Revenu intermédiaire supérieur", "Revenu intermédiaire inférieur", "Faible revenu"),
Lower_Bound = c(30.31, 43.88, 49.15, 40.31),  # Seuils inférieurs pour chaque groupe de revenu
color = c("purple", "blue", "green", "red")  # Couleurs associées aux groupes
)
# Générer une couleur unique pour chaque pays
unique_countries <- unique(evolution_data$country_label)
country_colors <- setNames(
grDevices::rainbow(length(unique_countries)),  # Palette de couleurs distinctes
unique_countries
)
# Combiner les couleurs des seuils et des pays
threshold_colors <- setNames(outlier_thresholds$color, outlier_thresholds$income_group_label)
combined_colors <- c(threshold_colors, country_colors)
# Créer le graphique avec les seuils d'outliers et des couleurs uniques
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
geom_line(size = 1) +  # Lignes pour chaque pays
geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  # Points pour chaque année
scale_size_continuous(range = c(2, 6)) +  # Échelle de la taille des points
scale_shape_manual(
values = c("Inflexion" = 17, "Stable" = 16),  # Triangle pour inflexion, cercle pour stable
name = "Type de changement"
) +
geom_hline(
data = outlier_thresholds,
aes(yintercept = Lower_Bound, color = income_group_label),  # Utilise les seuils et leurs couleurs
linetype = "dashed",
size = 0.8,
inherit.aes = FALSE  # Prevent conflicts with main aes mappings
) +
scale_x_continuous(
breaks = seq(2011, 2022, by = 1),  # Forcer les années entières comme graduations
labels = seq(2011, 2022, by = 1)   # Utiliser des années comme étiquettes
) +
scale_color_manual(
values = combined_colors,  # Combinaison des couleurs des seuils et des pays
breaks = c(names(threshold_colors), names(country_colors)),  # Légendes pour seuils et pays
labels = c(names(threshold_colors), names(country_colors))   # Libellés pour seuils et pays
) +
labs(
title = "",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (Groupe de revenu)\nSeuils (couleurs par revenu)",
size = "Amplitude du changement",
shape = "Type de changement"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
panel.grid = element_line(color = "grey90"),
plot.title = element_text(size = 14, face = "bold")
)
# Afficher le graphique
print(trend_plot)
# Sauvegarder le graphique
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/trend_plot_with_unique_country_colors.png",
plot = trend_plot,
width = 12,
height = 8,
bg = "white"
)
library(ggplot2)
library(dplyr)
# Créer un dataframe avec les seuils des outliers corrigés
outlier_thresholds <- data.frame(
income_group_label = c("Revenu élevé", "Revenu intermédiaire supérieur", "Revenu intermédiaire inférieur", "Faible revenu"),
Lower_Bound = c(30.31, 43.88, 49.15, 40.31),  # Seuils inférieurs pour chaque groupe de revenu
color = c("purple", "blue", "green", "red")  # Couleurs associées aux groupes
)
# Générer une couleur unique pour chaque pays
unique_countries <- unique(evolution_data$country_label)
country_colors <- setNames(
grDevices::rainbow(length(unique_countries)),  # Palette de couleurs distinctes
unique_countries
)
# Combiner les couleurs des seuils et des pays
threshold_colors <- setNames(outlier_thresholds$color, outlier_thresholds$income_group_label)
combined_colors <- c(threshold_colors, country_colors)
# Créer le graphique avec les seuils d'outliers et des couleurs uniques
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
geom_line(size = 1) +  # Lignes pour chaque pays
geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  # Points pour chaque année
scale_size_continuous(range = c(2, 6)) +  # Échelle de la taille des points
scale_shape_manual(
values = c("Inflexion" = 17, "Stable" = 16),  # Triangle pour inflexion, cercle pour stable
name = "Type de changement"
) +
geom_hline(
data = outlier_thresholds,
aes(yintercept = Lower_Bound, color = income_group_label),  # Utilise les seuils et leurs couleurs
linetype = "dashed",
size = 0.8,
inherit.aes = FALSE  # Prevent conflicts with main aes mappings
) +
scale_x_continuous(
breaks = seq(2011, 2022, by = 1),  # Forcer les années entières comme graduations
labels = seq(2011, 2022, by = 1)   # Utiliser des années comme étiquettes
) +
scale_color_manual(
values = combined_colors,  # Combinaison des couleurs des seuils et des pays
breaks = c(names(threshold_colors), names(country_colors)),  # Légendes pour seuils et pays
labels = c(names(threshold_colors), names(country_colors))   # Libellés pour seuils et pays
) +
labs(
title = "",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (Groupe de revenu)\nSeuils (couleurs par revenu)",
size = "Amplitude du changement",
shape = "Type de changement"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
panel.grid = element_line(color = "grey90"),
plot.title = element_text(size = 14, face = "bold")
)
# Afficher le graphique
print(trend_plot)
# Sauvegarder le graphique
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/trend_plot_with_unique_country_colors_fr.png",
plot = trend_plot,
width = 12,
height = 8,
bg = "white"
)
library(ggplot2)
library(dplyr)
# Créer un dataframe avec les seuils des outliers corrigés
outlier_thresholds <- data.frame(
income_group_label = c("Revenu élevé", "Revenu intermédiaire supérieur", "Revenu intermédiaire inférieur", "Faible revenu"),
Lower_Bound = c(30.31, 43.88, 49.15, 40.31),  # Seuils inférieurs pour chaque groupe de revenu
color = c("purple", "blue", "green", "red")  # Couleurs associées aux groupes
)
# Générer une couleur unique pour chaque pays
unique_countries <- unique(evolution_data$country_label)
country_colors <- setNames(
grDevices::rainbow(length(unique_countries)),  # Palette de couleurs distinctes
unique_countries
)
# Combiner les couleurs des seuils et des pays
threshold_colors <- setNames(outlier_thresholds$color, outlier_thresholds$income_group_label)
combined_colors <- c(threshold_colors, country_colors)
# Créer le graphique avec les seuils d'outliers et des couleurs uniques
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
geom_line(size = 1) +  # Lignes pour chaque pays
geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  # Points pour chaque année
scale_size_continuous(range = c(2, 6)) +  # Échelle de la taille des points
scale_shape_manual(
values = c("Inflexion" = 17, "Stable" = 16),  # Triangle pour inflexion, cercle pour stable
name = "Type de changement"
) +
geom_hline(
data = outlier_thresholds,
aes(yintercept = Lower_Bound, color = income_group_label),  # Utilise les seuils et leurs couleurs
linetype = "dashed",
size = 0.8,
inherit.aes = FALSE  # Prevent conflicts with main aes mappings
) +
scale_x_continuous(
breaks = seq(2011, 2022, by = 1),  # Forcer les années entières comme graduations
labels = seq(2011, 2022, by = 1)   # Utiliser des années comme étiquettes
) +
scale_color_manual(
values = combined_colors,  # Combinaison des couleurs des seuils et des pays
breaks = c(names(threshold_colors), names(country_colors)),  # Légendes pour seuils et pays
labels = c(names(threshold_colors), names(country_colors))   # Libellés pour seuils et pays
) +
labs(
title = "",
x = "Année",
y = "Just Transition Score (JTS)",
color = "Pays (Groupe de revenu)\nSeuils (Couleurs par revenu)",
size = "Amplitude du changement",
shape = "Type de changement"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
panel.grid = element_line(color = "grey90"),
plot.title = element_text(size = 14, face = "bold")
)
# Afficher le graphique
print(trend_plot)
# Sauvegarder le graphique
ggsave(
filename = "/Users/alexm/Documents/Recherches_scientifiques/These/Papiers/Papiers/chap_JUMI2023/trend_plot_with_unique_country_colors_fr.png",
plot = trend_plot,
width = 12,
height = 8,
bg = "white"
)
# Calcul des seuils des valeurs aberrantes par groupe de revenu
outlier_thresholds <- mean_JTS_by_iso3c %>%
group_by(income_group_num) %>%
summarise(
Q1 = quantile(Mean_JTS, 0.25, na.rm = TRUE),
Q3 = quantile(Mean_JTS, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
Lower_Bound = Q1 - 1.5 * IQR,
Upper_Bound = Q3 + 1.5 * IQR
)
# Calcul des seuils des valeurs aberrantes par groupe de revenu
outlier_thresholds <- mean_JTS_by_iso3c %>%
group_by(income_group_num) %>%
summarise(
Q1 = quantile(Mean_JTS, 0.25, na.rm = TRUE),
Q3 = quantile(Mean_JTS, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
Lower_Bound = Q1 - 1.5 * IQR,
Upper_Bound = Q3 + 1.5 * IQR
)
# Moyenne des JTS par pays
mean_JTS_by_iso3c <- JTS_SP_IV_GDPpc %>%
group_by(iso3c, income_group_num) %>%
summarise(
Mean_JTS = mean(JTS, na.rm = TRUE), # Moyenne des JTS pour chaque pays
GDPpc_Mean = mean(wdi_gdppc, na.rm = TRUE), # Moyenne des PIB/habitant pour chaque pays
.groups = "drop"
)
# Aperçu des moyennes par pays
print(mean_JTS_by_iso3c)
# Calcul des seuils des valeurs aberrantes par groupe de revenu
outlier_thresholds <- mean_JTS_by_iso3c %>%
group_by(income_group_num) %>%
summarise(
Q1 = quantile(Mean_JTS, 0.25, na.rm = TRUE),
Q3 = quantile(Mean_JTS, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
Lower_Bound = Q1 - 1.5 * IQR,
Upper_Bound = Q3 + 1.5 * IQR
)
# Aperçu des seuils calculés
print(outlier_thresholds)
# Identifier les outliers basés sur les moyennes
outlier_summary <- mean_JTS_by_iso3c %>%
left_join(outlier_thresholds, by = "income_group_num") %>%
mutate(
Is_Outlier = ifelse(Mean_JTS < Lower_Bound | Mean_JTS > Upper_Bound, TRUE, FALSE)
) %>%
filter(Is_Outlier)
# Aperçu des pays outliers
print(outlier_summary)
View(outlier_summary)
# Identifie les valeurs aberrantes par groupe de revenu
outliers <- JTS_SP_IV_GDPpc %>%
group_by(income_group_num) %>%
summarise(
Q1 = quantile(JTS, 0.25, na.rm = TRUE),
Q3 = quantile(JTS, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
Lower_Bound = Q1 - 1.5 * IQR,
Upper_Bound = Q3 + 1.5 * IQR
) %>%
right_join(JTS_SP_IV_GDPpc, by = "income_group_num") %>%
filter(JTS < Lower_Bound | JTS > Upper_Bound) %>%
select(iso3c, year, income_group_num, JTS, Lower_Bound, Upper_Bound)
# Afficher les pays avec des valeurs aberrantes
print(outliers)
