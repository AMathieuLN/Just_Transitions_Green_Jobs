---
title: "JT_GJ_en"
---

## Data preparation

### Data sources and origins

### Package and library

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
```

```{r}
source("requirements.R")
```

```{r}
# Importing the RDS file
file_path1 <- "data/JTS_SP.xlsx"
# Reading the RDS file
JTS_SP <- read_excel(file_path1)
# Importing the RDS file
file_path2 <- "data/IV.rds"
# Reading the RDS file
IV <- readRDS(file_path2)
```

### Error correction

```{r}
# Checking the data structure
str(JTS_SP)
# Displaying the column names
colnames(JTS_SP)
```

```{r}
# Renaming the column with unwanted characters
colnames(JTS_SP) <- colnames(JTS_SP) %>%
  gsub("\r|\n", "", .) # Removes \r and \n characters
colnames(JTS_SP)[colnames(JTS_SP) == "yearyear"] <- "year"
# Checking the columns after correction
colnames(JTS_SP)
```

```{r}
# Converting the "year" column to numeric
JTS_SP$year <- as.numeric(JTS_SP$year)
# Checking the column types
str(JTS_SP)
```

```{r}
# Renaming the "iso" column to "iso3c"
JTS_SP <- JTS_SP %>%
  rename(iso3c = iso)
```

### Mergin with "IV"

```{r}
# Merging JTS_SP and IV on the keys "iso3c" and "country"
JTS_SP_IV <- JTS_SP %>%
  left_join(IV, by = "iso3c")
```

```{r}
# Renaming columns in the merged dataset
JTS_SP_IV <- JTS_SP_IV %>%
  rename(
    country_JTS = country.x,
    country_IV = country.y
  )
```

```{r}
# Checking the total number of missing values in the dataset
sum(is.na(JTS_SP_IV))
```

```{r}
# Extracting rows containing missing values
missing_rows <- JTS_SP_IV[!complete.cases(JTS_SP_IV), ]

# Displaying the first rows with missing values
head(missing_rows)
```

The case of Venezuela presents a notable peculiarity in the context of income group classifications. Specifically, this country is not included in any "income_group" category in the most recent data. Historically, the United Nations classified Venezuela within the "Upper middle income" group for an extended period, as evidenced by their official database: <https://publicadministration.un.org/egovkb/en-us/Data/Country-Information/id/188-Venezuela>. However, starting in 2021, this classification was suspended due to a lack of updated data. Given that our dataset extends up to the year 2022, we have opted to reinstate this previous classification to maintain consistency in our analyses.

```{r}
# Displaying unique values of "income_group"
unique(JTS_SP_IV$income_group)
```

```{r}
# Checking the current levels of "income_group"
levels(JTS_SP_IV$income_group)
```

```{r}
# Filling NA with "Upper middle income" for Venezuela
JTS_SP_IV$income_group[JTS_SP_IV$iso3c == "VEN" & is.na(JTS_SP_IV$income_group)] <- "Upper middle income"
# Verifying that the filling was successfully performed
table(JTS_SP_IV$income_group)
```

```{r}
# Reclassifying factor levels
JTS_SP_IV$income_group <- factor(
  JTS_SP_IV$income_group,
  levels = c("High income", "Upper middle income", "Lower middle income", "Low income")
)
# Creating a numeric column based on the order of levels
JTS_SP_IV$income_group_num <- as.numeric(JTS_SP_IV$income_group)
# Verifying the new classifications
table(JTS_SP_IV$income_group, JTS_SP_IV$income_group_num)
```

```{r}
# Checking the total number of missing values in the dataset
sum(is.na(JTS_SP_IV))
```

#### Downloading "JTS_SP_IV"

```{r}
# Saving the merged file in RDS format in the "data/" folder
saveRDS(JTS_SP_IV, file = "data/JTS_SP_IV.rds", compress = "xz")
```

### Merging with GDP per capita data

The data used in this study was initially downloaded via the R package provided by the World Bank, ensuring its authenticity and compliance with international standards. For this specific study, GDP per capita (referred to here as "wdi_gdppc") was extracted as the sole relevant variable from the consolidated dataset to meet the targeted research objectives.

```{r}
# Loading the RDS file
file_path3 <- "data/WDI_GDPPC.xlsx"
# Reading the Excel file
WDI_GDPPC <- read_excel(file_path3)
```

```{r}
# Merging JTS_SP_IV with WDI_GDPPC
JTS_SP_IV_GDPpc <- JTS_SP_IV %>%
  left_join(WDI_GDPPC, by = c("iso3c", "year"))
# Checking the first rows of the merged dataframe
head(JTS_SP_IV_GDPpc)
```

The number of observations increases between the variables "JTS_SP_IV" (1932) and "JTS_SP_IV_GDPpc" (1956). This increase could be explained by the presence of duplicates or multiple matches in the WDI_GDPPC dataframe, which contains GDP per capita data.

```{r}
# Identifying duplicates in WDI_GDPPC
WDI_GDPPC_duplicates <- WDI_GDPPC %>%
  group_by(iso3c, year) %>%
  filter(n() > 1)

# Displaying duplicates
print(WDI_GDPPC_duplicates)
```

There are duplicates for ZAF (South Africa) and RUS (Russia).

```{r}
# Checking duplicates specific to ZAF and RUS
WDI_GDPPC %>%
  filter(iso3c %in% c("ZAF", "RUS")) %>%
  group_by(iso3c, year) %>%
  summarise(Count = n(), .groups = "drop") %>%
  filter(Count > 1)
```

```{r}
# Removing duplicates in WDI_GDPPC
WDI_GDPPC <- WDI_GDPPC %>%
  distinct(iso3c, year, .keep_all = TRUE)
# Verifying the removal of duplicates
WDI_GDPPC %>%
  filter(iso3c %in% c("ZAF", "RUS")) %>%
  group_by(iso3c, year) %>%
  summarise(Count = n(), .groups = "drop")
```

```{r}
# Corrected merge
JTS_SP_IV_GDPpc <- JTS_SP_IV %>%
  left_join(WDI_GDPPC, by = c("iso3c", "year"))
# Checking the final number of observations
nrow(JTS_SP_IV_GDPpc)
```

#### Verification of the merge between "JTS_SP_IV" and "WDI_GDPPC"

```{r}
# Checking for duplicates in the final dataframe
JTS_SP_IV_GDPpc %>%
  group_by(iso3c, year) %>%
  summarise(Count = n(), .groups = "drop") %>%
  filter(Count > 1)
```

```{r}
# Checking for NA values in wdi_gdppc
sum(is.na(JTS_SP_IV_GDPpc$wdi_gdppc))
```

```{r}
# Identifying rows with missing values
missing_gdppc <- JTS_SP_IV_GDPpc %>%
  filter(is.na(wdi_gdppc)) %>%
  select(iso3c, year)
# Displaying missing countries and years
print(missing_gdppc)
```

Observations: four countries with problematic missing data:

-   **SYR** (Syria): Only one year is missing (2022). This can be filled using linear interpolation or by averaging the closest years.

-   **DJI** (Djibouti): Two years are missing (2011 and 2012). These values can be estimated using linear interpolation.

-   **ERI** (Eritrea): Data is completely missing between 2013 and 2022. Consequently, this country is excluded from the analysis, and the corresponding rows are removed.

-   **VEN** (Venezuela): No data is available for any year. This country is also removed from the dataset.

```{r}
# Removing ERI and VEN
JTS_SP_IV_GDPpc <- JTS_SP_IV_GDPpc %>%
  filter(!(iso3c %in% c("ERI", "VEN")))
```

```{r}
# Verifying the removal of ERI and VEN
JTS_SP_IV_GDPpc %>%
  filter(iso3c %in% c("ERI", "VEN"))
```

```{r}
# Extrapolation for SYR and DJI only
JTS_SP_IV_GDPpc <- JTS_SP_IV_GDPpc %>%
  group_by(iso3c) %>%
  mutate(wdi_gdppc = ifelse(
    iso3c %in% c("SYR", "DJI"),
    na.approx(wdi_gdppc, rule = 2, na.rm = FALSE), # Extrapolation aux extrémités
    wdi_gdppc
  )) %>%
  ungroup()
```

```{r}
# Verifying interpolated data for SYR and DJI
JTS_SP_IV_GDPpc %>%
  filter(iso3c %in% c("SYR", "DJI")) %>%
  select(iso3c, year, wdi_gdppc)
```

#### Downloading "JTS_SP_IV_GDPpc"

```{r}
# Saving the merged file in RDS format in the "outputs/" folder
saveRDS(JTS_SP_IV_GDPpc, file = "outputs/JTS_SP_IV_GDPpc.rds", compress = "xz")
```

## Analyses Based on "JTS_SP_IV_GDPpc"

### 1. Linear and Quadratic Models

This analysis examines the relationship between the Just Transition Score (JTS) and GDP per capita using linear and quadratic models. The quadratic approach captures potential non-linear relationships, often observed in complex socio-economic contexts. Figure 1 visually illustrates this relationship by overlaying a quadratic curve on a scatter plot that distinguishes income groups, providing a nuanced understanding of the dynamics between these variables.

#### Table 1 "Linear and Quadratic Relationships Between JTS and GDP per Capita"

```{r}
# Simple linear model
model_linear <- lm(JTS ~ wdi_gdppc, data = JTS_SP_IV_GDPpc)
# Summary of the linear model
summary(model_linear)
```

```{r}
# Quadratic model
model_quad <- lm(JTS ~ wdi_gdppc + I(wdi_gdppc^2), data = JTS_SP_IV_GDPpc)
# Summary of the quadratic model
summary(model_quad)
```

#### Figure 1 "Scatter Plot with Quadratic Curve"

```{r}
# Scatter plot with quadratic curve and income group distinction
scatter_plot <- ggplot(JTS_SP_IV_GDPpc, aes(x = wdi_gdppc, y = JTS, color = as.factor(income_group_num))) +
  geom_point(alpha = 0.6) +  # Points colored by income group
  stat_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red") +  # Global quadratic curve
  labs(
    title = "",
    x = "GDP per Capita (2015 Constant Dollars)",
    y = "Just Transition Score (JTS)",
    color = "Income Group"
  ) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    legend.position = "right"
  ) +
  scale_color_manual(
    values = c("1" = "red", "2" = "green", "3" = "blue", "4" = "purple"),
    labels = c(
      "1" = "High Income",
      "2" = "Upper Middle Income",
      "3" = "Lower Middle Income",
      "4" = "Low Income"
    )
  )
# Display the plot
print(scatter_plot)
```

```{r}
# Saving the plot with a white background
ggsave(
  filename = "outputs/scatter_plot_en.png", 
  plot = scatter_plot,
  width = 8,
  height = 6,
  bg = "white"
)
```

### 2. Outliers

To identify outliers, we apply the interquartile range (IQR) method. An observation is considered an outlier if its **JTS** score meets one of the following conditions:

-   **Lower** than Q1−1.5×IQR

-   **Higher** than Q3​+1.5×IQR

Where Q1​ and Q3 represent the first and third quartiles of the JTS distribution, respectively, and IQR is defined as Q3−Q1.

```{r}
# Identifying outliers by income group
outliers <- JTS_SP_IV_GDPpc %>%
  group_by(income_group_num) %>%
  summarise(
    Q1 = quantile(JTS, 0.25, na.rm = TRUE),
    Q3 = quantile(JTS, 0.75, na.rm = TRUE),
    IQR = Q3 - Q1,
    Lower_Bound = Q1 - 1.5 * IQR,
    Upper_Bound = Q3 + 1.5 * IQR
  ) %>%
  right_join(JTS_SP_IV_GDPpc, by = "income_group_num") %>%
  filter(JTS < Lower_Bound | JTS > Upper_Bound) %>%
  select(iso3c, year, income_group_num, JTS, Lower_Bound, Upper_Bound)
# Countries with outliers
print(outliers)
```

#### Figure 2 "Outlier JTS Scores by Income Group"

```{r}
# Random seed for reproducibility
set.seed(123)
# Boxplot with annotated outliers
boxplot_with_outliers <- ggplot(JTS_SP_IV_GDPpc, aes(x = as.factor(income_group_num), y = JTS, fill = as.factor(income_group_num))) +
  geom_boxplot(outlier.shape = NA) +  
  geom_jitter(data = outliers, aes(label = iso3c), color = "red", size = 2) + 
  labs(
    title = "",
    x = "Income Group",
    y = "Just Transition Score (JTS)",
    fill = "Income Group"
  ) +
  scale_fill_manual(
    values = c("1" = "red", "2" = "green", "3" = "blue", "4" = "purple"),
    labels = c(
      "1" = "High Income",
      "2" = "Upper Middle Income",
      "3" = "Lower Middle Income",
      "4" = "Low Income"
    )
  ) +
  theme_minimal()
# Display the plot
print(boxplot_with_outliers)
```

```{r}
# Saving the plot with a white background
ggsave(
  filename = "outputs/boxplot_with_outliers_en.png", 
  plot = scatter_plot,
  width = 8,
  height = 6,
  bg = "white"
)
```

#### Table 2 "Outlier Countries by Income Group and Number of Outlier Years"

```{r}
# Unique list of outlier countries (iso3c, country name, income group)
outliers_unique <- outliers %>%
  group_by(iso3c) %>%
  summarise(
    country = first(iso3c),       
    income_group = first(income_group_num), 
    num_outlier_years = n()       
  ) %>%
  ungroup()
# Summary of outlier countries
print(outliers_unique)
```

#### Figure 3 "JTS Score Trends with Inflection Points by Country"

```{r}
# Selecting relevant outliers based on results
selected_outliers <- JTS_SP_IV_GDPpc %>%
  filter(iso3c %in% c("BHR", "OMN", "MRT", "AFG", "CHN"))
```

```{r}
# Adding annual changes and identifying inflection points
evolution_data <- selected_outliers %>%
  arrange(iso3c, year) %>%
  group_by(iso3c) %>%
  mutate(
    year = as.integer(year),  
    annual_change = JTS - lag(JTS),  
    significant_change = ifelse(abs(annual_change) > 5, "Inflection", "Stable"),  # Threshold for significant change
    income_group_label = case_when(  
      income_group_num == 1 ~ "High Income",
      income_group_num == 2 ~ "Upper Middle Income",
      income_group_num == 3 ~ "Lower Middle Income",
      income_group_num == 4 ~ "Low Income"
    ),
    country_label = paste0(iso3c, " (", income_group_label, ")")  
  ) %>%
  filter(!is.na(significant_change))  
```

```{r}
# Creating a dataframe with adjusted outlier thresholds
outlier_thresholds <- data.frame(
  income_group_label = c("Low Income", "Lower Middle Income", "Upper Middle Income", "High Income"),
  Lower_Bound = c(30.31, 43.88, 49.15, 40.31),  
  color = c("purple", "blue", "green", "red")
)
# Unique color for each country
unique_countries <- unique(evolution_data$country_label)
country_colors <- setNames(
  grDevices::rainbow(length(unique_countries)),  
  unique_countries
)
# Combine threshold and country colors
threshold_colors <- setNames(outlier_thresholds$color, outlier_thresholds$income_group_label)
combined_colors <- c(threshold_colors, country_colors)

# Creating a plot with adjusted outlier thresholds and unique country colors
trend_plot <- ggplot(evolution_data, aes(x = year, y = JTS, group = iso3c, color = country_label)) +
  geom_line(size = 1) +  
  geom_point(aes(size = abs(annual_change), shape = significant_change), alpha = 0.7) +  
  scale_size_continuous(range = c(2, 6)) +  
  scale_shape_manual(
    values = c("Inflection" = 17, "Stable" = 16),  # Triangle for inflection, circle for stable
    name = "Change Type"
  ) +
  geom_hline(
    data = outlier_thresholds,
    aes(yintercept = Lower_Bound, color = income_group_label),  
    linetype = "dashed",
    size = 0.8,
    inherit.aes = FALSE  
  ) +
  scale_x_continuous(
    breaks = seq(2011, 2022, by = 1),  
    labels = seq(2011, 2022, by = 1)   
  ) +
  scale_color_manual(
    values = combined_colors,  
    breaks = c(names(threshold_colors), names(country_colors)),  
    labels = c(names(threshold_colors), names(country_colors))   
  ) +
  labs(
    title = "",
    x = "Year",
    y = "Just Transition Score (JTS)",
    color = "Country (Income Group)\nThresholds (By Income Group Color)",
    size = "Change Magnitude",
    shape = "Change Type"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 10),
    panel.grid = element_line(color = "grey90"),
    plot.title = element_text(size = 14, face = "bold")
  )
# Display the plot
print(trend_plot)
```

```{r}
# Saving the plot
ggsave(
  filename = "outputs/trend_plot_en.png",
  plot = trend_plot,
  width = 12,
  height = 8,
  bg = "white"
)
```
